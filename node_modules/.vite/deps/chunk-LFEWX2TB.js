import {
  Qualifier
} from "./chunk-UHKTWXPV.js";
import {
  QualifierValue
} from "./chunk-QESUYXYX.js";

// node_modules/@cloudinary/transformation-builder-sdk/qualifiers/gravity/GravityQualifier.js
var GravityQualifier = class extends Qualifier {
  /**
   * @param value, an array containing (GravityObject | AutoGravity | string) or a string;
   */
  constructor(value) {
    super("g", new QualifierValue(value));
  }
};

// node_modules/@cloudinary/transformation-builder-sdk/qualifiers/gravity/compassGravity/CompassGravity.js
var CompassGravity = class extends GravityQualifier {
  constructor(dir) {
    super(dir);
  }
};

// node_modules/@cloudinary/transformation-builder-sdk/qualifiers/gravity/focusOnGravity/FocusOnGravity.js
var FocusOnGravity = class extends GravityQualifier {
  constructor(FocusOnObjects) {
    super(FocusOnObjects);
  }
  /**
   * @description Specifies the gravity to use if none of the other gravity objects are found.
   * @param {Qualifiers.Gravity.AutoGravity} val
   */
  fallbackGravity(val) {
    this.addValue(val.qualifierValue);
    return this;
  }
};

// node_modules/@cloudinary/transformation-builder-sdk/qualifiers/gravity/autoGravity/AutoGravity.js
var AutoGravity = class extends GravityQualifier {
  constructor() {
    super("auto");
  }
  /**
   * @description Autofocuses on objects, allowing their priority within the algorithm to be configured.
   * @param {AutoFocus} AutoFocusObjects
   */
  autoFocus(...AutoFocusObjects) {
    this.addValue(AutoFocusObjects);
    return this;
  }
};

// node_modules/@cloudinary/transformation-builder-sdk/qualifiers/gravity/xyCenterGravity/XYCenterGravity.js
var XYCenterGravity = class extends GravityQualifier {
  constructor() {
    super("xy_center");
  }
};

// node_modules/@cloudinary/transformation-builder-sdk/qualifiers/gravity.js
function compass(direction) {
  return new CompassGravity(direction);
}
function focusOn(...args) {
  const res = [...args];
  return new FocusOnGravity(res);
}
function autoGravity() {
  return new AutoGravity();
}
function xyCenter() {
  return new XYCenterGravity();
}
var Gravity = {
  compass,
  autoGravity,
  focusOn,
  xyCenter
};

export {
  GravityQualifier,
  AutoGravity,
  FocusOnGravity,
  CompassGravity,
  compass,
  focusOn,
  autoGravity,
  xyCenter,
  Gravity
};
//# sourceMappingURL=chunk-LFEWX2TB.js.map
