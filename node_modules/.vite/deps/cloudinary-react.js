import {
  require_cloudinary_core
} from "./chunk-JER6M74M.js";
import {
  require_react
} from "./chunk-YN3MIK7E.js";
import {
  __commonJS,
  __toESM
} from "./chunk-4EOJPDL2.js";

// node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment2 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment2;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/react-is/index.js
var require_react_is = __commonJS({
  "node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  }
});

// node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "node_modules/object-assign/index.js"(exports, module) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]];
            }
          }
        }
      }
      return to;
    };
  }
});

// node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  }
});

// node_modules/prop-types/lib/has.js
var require_has = __commonJS({
  "node_modules/prop-types/lib/has.js"(exports, module) {
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "node_modules/prop-types/checkPropTypes.js"(exports, module) {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has = require_has();
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has;
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error(
                  (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                );
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning(
                (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning(
                "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
              );
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  }
});

// node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
    "use strict";
    var ReactIs = require_react_is();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x, y) {
        if (x === y) {
          return x !== 0 || 1 / x === 1 / y;
        } else {
          return x !== x && y !== y;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error(
                "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
              );
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3) {
                printWarning(
                  "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError(
              "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
              { expectedType }
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning(
                "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
              );
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is(propValue, expectedValues[i])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== "function") {
            printWarning(
              "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
            );
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker2 = arrayOfTypeCheckers[i2];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError(
          (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
        );
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
              );
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "node_modules/prop-types/index.js"(exports, module) {
    if (true) {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// node_modules/cloudinary-react/dist/cloudinary-react.esm.js
var import_react = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
var import_cloudinary_core = __toESM(require_cloudinary_core());
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var _excluded$2 = ["public_id"];
var _excluded2 = ["publicId"];
var _excluded3 = ["children"];
var _excluded4 = ["children", "accessibility", "placeholder"];
var camelCase$1 = import_cloudinary_core.Util.camelCase;
var withCamelCaseKeys = import_cloudinary_core.Util.withCamelCaseKeys;
var isEmpty = import_cloudinary_core.Util.isEmpty;
var CLOUDINARY_REACT_PROPS = ["accessibility", "breakpoints", "dataSrc", "placeholder", "publicId", "signature", "authToken"];
var VIDEO_MIME_TYPES = {
  flv: "x-flv",
  "3gp": "3gpp",
  mov: "quicktime",
  mpg: "mpeg",
  avi: "x-msvideo",
  wmv: "x-ms-wmv",
  ogv: "ogg"
};
var AUDIO_MIME_TYPES = {
  m4a: "mp4",
  wav: "vnd.wav",
  m3u: "x-mpegurl",
  mp3: "mpeg",
  ogv: "ogg",
  aif: "x-aiff",
  aifc: "x-aiff",
  aiff: "x-aiff"
};
var CLOUDINARY_PROPS = [].concat(import_cloudinary_core.Transformation.PARAM_NAMES, CLOUDINARY_REACT_PROPS).map(import_cloudinary_core.Util.camelCase).reduce(function(accumulator, cloudinaryPropName) {
  accumulator[cloudinaryPropName] = true;
  return accumulator;
}, {});
var nonEmpty = function nonEmpty2(obj) {
  return Object.entries(obj).reduce(function(a, _ref) {
    var _extends2;
    var k = _ref[0], v = _ref[1];
    return v == null ? a : _extends({}, a, (_extends2 = {}, _extends2[k] = v, _extends2));
  }, {});
};
var getConfiguredCloudinary = function getConfiguredCloudinary2(extendedProps) {
  var _nonEmpty = nonEmpty(extendedProps), ops = _objectWithoutPropertiesLoose(_nonEmpty, _excluded$2);
  var options = import_cloudinary_core.Util.withSnakeCaseKeys(ops);
  return import_cloudinary_core.Cloudinary["new"](options);
};
var getTag = function getTag2(props, tagType) {
  var publicId = props.publicId, ops = _objectWithoutPropertiesLoose(props, _excluded2);
  var cld = getConfiguredCloudinary(ops);
  return cld[tagType + "Tag"](publicId, import_cloudinary_core.Util.withSnakeCaseKeys(ops));
};
var getImageTag = function getImageTag2(props) {
  return getTag(props, "image");
};
var makeElementResponsive = function makeElementResponsive2(img, options) {
  var snakeCaseOptions = import_cloudinary_core.Util.withSnakeCaseKeys(options);
  var cld = getConfiguredCloudinary(snakeCaseOptions);
  cld.cloudinary_update(img, snakeCaseOptions);
  return cld.responsive(snakeCaseOptions, false);
};
var extractCloudinaryProps = function extractCloudinaryProps2(_ref2) {
  var children = _ref2.children, props = _objectWithoutPropertiesLoose(_ref2, _excluded3);
  var result = {
    children,
    cloudinaryProps: {},
    nonCloudinaryProps: {},
    cloudinaryReactProps: {}
  };
  Object.keys(props).forEach(function(key) {
    var camelKey = import_cloudinary_core.Util.camelCase(key);
    var value = props[key];
    if (CLOUDINARY_PROPS[camelKey]) {
      if (props[key] !== void 0 && props[key] !== null) {
        result.cloudinaryProps[camelKey] = value;
      }
    } else if (camelKey === "includeOwnBody") {
      result.cloudinaryReactProps[camelKey] = value;
    } else {
      result.nonCloudinaryProps[key] = value;
    }
  });
  return result;
};
var isCloudinaryComponent = function isCloudinaryComponent2(component, displayName) {
  return !!(import_react.default.isValidElement(component) && component.type && component.type.displayName === displayName);
};
var normalizeOptions = function normalizeOptions2() {
  return [].slice.call(arguments).reduce(function(left, right) {
    Object.keys(right || {}).forEach(function(key) {
      var value = right[key];
      if (value !== null && value !== void 0) {
        left[key] = value;
      }
    });
    return left;
  }, {});
};
var getChildPlaceholder = function getChildPlaceholder2(children) {
  var result = null;
  if (children) {
    result = import_react.default.Children.toArray(children).find(function(child) {
      return isCloudinaryComponent(child, "CloudinaryPlaceholder");
    });
  }
  return result;
};
var getChildTransformations = function getChildTransformations2(children) {
  var result = children ? import_react.default.Children.toArray(children).filter(function(child) {
    return isCloudinaryComponent(child, "CloudinaryTransformation");
  }).map(function(child) {
    var options = normalizeOptions(child.props, child.context);
    var childOptions = getChildTransformations2(child.props.children);
    if (childOptions) {
      options.transformation = childOptions;
    }
    return options;
  }) : [];
  return result.length ? result : null;
};
var only = function only2(source, keys) {
  if (keys === void 0) {
    keys = [];
  }
  if (!source) {
    return source;
  }
  return keys.reduce(function(tr, key) {
    if (key in source) {
      tr[key] = source[key];
    }
    return tr;
  }, {});
};
var typesFrom = function typesFrom2(configParams) {
  configParams = configParams || [];
  var types = {};
  for (var i = 0; i < configParams.length; i++) {
    var key = configParams[i];
    types[camelCase$1(key)] = import_prop_types.default.any;
  }
  return types;
};
var getTransformation = function getTransformation2(extendedProps) {
  var children = extendedProps.children, accessibility = extendedProps.accessibility, placeholder = extendedProps.placeholder, rest = _objectWithoutPropertiesLoose(extendedProps, _excluded4);
  var ownTransformation = only(withCamelCaseKeys(rest), import_cloudinary_core.Transformation.methods) || {};
  var childrenOptions = getChildTransformations(children);
  if (!isEmpty(childrenOptions)) {
    ownTransformation.transformation = childrenOptions;
  }
  var advancedTransformations = {
    accessibility,
    placeholder
  };
  Object.keys(advancedTransformations).filter(function(k) {
    return advancedTransformations[k];
  }).forEach(function(k) {
    ownTransformation[k] = advancedTransformations[k];
  });
  return ownTransformation;
};
var CloudinaryContextType = (0, import_react.createContext)();
var camelCase = import_cloudinary_core.Util.camelCase;
var CloudinaryComponent = function(_PureComponent) {
  _inheritsLoose(CloudinaryComponent2, _PureComponent);
  function CloudinaryComponent2(_props, _context) {
    var _this;
    _this = _PureComponent.call(this, _props, _context) || this;
    _this.getContext = function() {
      return _this.context || {};
    };
    _this.onIntersect = function() {
      _this.setState({
        isInView: true
      });
    };
    _this.getExtendedProps = function(props, context) {
      if (props === void 0) {
        props = _this.props;
      }
      if (context === void 0) {
        context = _this.getContext();
      }
      return normalizeOptions(context, props);
    };
    _this.attachRef = function(element) {
      var innerRef = _this.props.innerRef;
      _this.element.current = element;
      if (innerRef) {
        if (innerRef instanceof Function) {
          innerRef(element);
        } else {
          innerRef.current = element;
        }
      }
    };
    _this.element = (0, import_react.createRef)();
    return _this;
  }
  var _proto = CloudinaryComponent2.prototype;
  _proto.render = function render() {
    return null;
  };
  return CloudinaryComponent2;
}(import_react.PureComponent);
CloudinaryComponent.defaultProps = {
  innerRef: null,
  publicId: null
};
CloudinaryComponent.propTypes = _extends({}, typesFrom(import_cloudinary_core.Transformation.PARAM_NAMES.map(camelCase)), {
  innerRef: import_prop_types.default.any,
  publicId: import_prop_types.default.string
});
CloudinaryComponent.contextType = CloudinaryContextType;
var CloudinaryContext = function(_CloudinaryComponent) {
  _inheritsLoose(CloudinaryContext2, _CloudinaryComponent);
  function CloudinaryContext2() {
    return _CloudinaryComponent.apply(this, arguments) || this;
  }
  var _proto = CloudinaryContext2.prototype;
  _proto.render = function render() {
    var props = _extends({}, this.getContext(), this.props);
    var _extractCloudinaryPro = extractCloudinaryProps(props), children = _extractCloudinaryPro.children, cloudinaryProps = _extractCloudinaryPro.cloudinaryProps, nonCloudinaryProps = _extractCloudinaryPro.nonCloudinaryProps, cloudinaryReactProps = _extractCloudinaryPro.cloudinaryReactProps;
    return import_react.default.createElement(CloudinaryContextType.Provider, {
      value: cloudinaryProps
    }, cloudinaryReactProps.includeOwnBody ? children : import_react.default.createElement("div", nonCloudinaryProps, children));
  };
  return CloudinaryContext2;
}(CloudinaryComponent);
CloudinaryContext.propTypes = _extends({}, CloudinaryComponent.propTypes, {
  includeOwnBody: import_prop_types.default.bool
});
CloudinaryContext.defaultProps = {
  includeOwnBody: false
};
var _excluded$1 = ["children", "innerRef"];
var RESPONSIVE_OVERRIDE_WARNING = `
Warning: passing a number value for width cancels the 'responsive' prop's effect on the image transformation.
The 'responsive' prop affects the image transformation only when width === 'auto'.
Passing 'width="auto" responsive' will affect the actual image width that is fetched from Cloudinary.
The 'responsive' prop causes the Image component to request an image which width is equal to the width of it's container.
When passing 'width="auto" responsive', you can set the <img> element width by passing a 'style' prop`.trim();
var Image = function(_CloudinaryComponent) {
  _inheritsLoose(Image2, _CloudinaryComponent);
  function Image2(props, context) {
    var _this;
    _this = _CloudinaryComponent.call(this, props, context) || this;
    _this.isResponsive = function() {
      var _this$getExtendedProp = _this.getExtendedProps(), responsive = _this$getExtendedProp.responsive, width = _this$getExtendedProp.width;
      if (responsive && width !== "auto") {
        console.warn(RESPONSIVE_OVERRIDE_WARNING);
      }
      return responsive && _this.element && _this.element.current;
    };
    _this.getOptions = function() {
      var extendedProps = _this.getExtendedProps();
      var _extendedProps$getTra = _extends({}, extendedProps, getTransformation(extendedProps)), options = _objectWithoutPropertiesLoose(_extendedProps$getTra, _excluded$1);
      if (!_this.shouldLazyLoad()) {
        delete options.loading;
      }
      return options;
    };
    _this.getAttributes = function(additionalOptions) {
      if (additionalOptions === void 0) {
        additionalOptions = {};
      }
      var _additionalOptions = additionalOptions, placeholder = _additionalOptions.placeholder;
      var options = extractCloudinaryProps(_extends({}, _this.getOptions(), additionalOptions));
      var cloudinaryProps = options.cloudinaryProps, nonCloudinaryProps = options.nonCloudinaryProps, cloudinaryReactProps = options.cloudinaryReactProps;
      var imageTag = getImageTag(_extends({}, cloudinaryProps, cloudinaryReactProps));
      var cloudinaryAttributes = import_cloudinary_core.Util.withCamelCaseKeys(imageTag.attributes());
      var attributes = _extends({}, cloudinaryAttributes, nonCloudinaryProps);
      if (attributes.dataSrc) {
        attributes["data-src"] = attributes.dataSrc;
      }
      if (placeholder && attributes.id) {
        attributes.id += "-cld-placeholder";
      }
      if (_this.shouldLazyLoad()) {
        attributes["data-src"] = attributes.dataSrc || attributes.src;
        delete attributes.src;
      }
      CLOUDINARY_REACT_PROPS.forEach(function(attr) {
        delete attributes[attr];
      });
      return attributes;
    };
    _this.update = function() {
      if (_this.shouldLazyLoad()) {
        import_cloudinary_core.Util.detectIntersection(_this.element.current, _this.onIntersect);
      } else if (_this.isResponsive()) {
        var options = _this.getOptions();
        var placeholder = _this.getPlaceholderType();
        if (placeholder) {
          var removePlaceholderListener = makeElementResponsive(_this.placeholderElement.current, _extends({}, options, {
            placeholder
          }));
          _this.listenerRemovers.push(removePlaceholderListener);
        }
        var removeImgListener = makeElementResponsive(_this.element.current, options);
        _this.listenerRemovers.push(removeImgListener);
      }
    };
    _this.shouldLazyLoad = function() {
      var _this$getExtendedProp2 = _this.getExtendedProps(), loading = _this$getExtendedProp2.loading;
      var isInView = _this.state.isInView;
      return !isInView && (loading === "lazy" || loading === "auto");
    };
    _this.handleImageLoaded = function() {
      var onLoad = _this.props.onLoad;
      _this.setState({
        isLoaded: true
      }, function() {
        if (onLoad) {
          onLoad();
        }
      });
    };
    _this.renderPlaceholder = function(placeholder, attributes) {
      attributes.style = _extends({}, attributes.style || {}, {
        opacity: 0,
        position: "absolute"
      });
      attributes.onLoad = _this.handleImageLoaded;
      var placeholderWrapperStyle = {
        display: "inline"
      };
      var placeholderAttributes = _this.getAttributes({
        placeholder
      });
      return import_react.default.createElement(import_react.Fragment, null, _this.renderImage(attributes), import_react.default.createElement("div", {
        style: placeholderWrapperStyle
      }, import_react.default.createElement("img", _extends({
        ref: _this.placeholderElement
      }, placeholderAttributes))));
    };
    _this.renderImage = function(attributes) {
      return import_react.default.createElement("img", _extends({
        ref: _this.attachRef
      }, attributes));
    };
    _this.getPlaceholderType = function() {
      var _this$getExtendedProp3 = _this.getExtendedProps(), children = _this$getExtendedProp3.children;
      var placeholder = getChildPlaceholder(children);
      return placeholder ? placeholder.props.type : null;
    };
    _this.placeholderElement = (0, import_react.createRef)();
    _this.state = {
      isLoaded: false
    };
    _this.listenerRemovers = [];
    return _this;
  }
  var _proto = Image2.prototype;
  _proto.componentDidMount = function componentDidMount() {
    this.update();
  };
  _proto.componentDidUpdate = function componentDidUpdate() {
    this.update();
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    this.listenerRemovers.forEach(function(removeListener) {
      return removeListener();
    });
  };
  _proto.render = function render() {
    var isLoaded = this.state.isLoaded;
    var attributes = this.getAttributes();
    var placeholder = this.getPlaceholderType();
    if (!isLoaded && placeholder) {
      return this.renderPlaceholder(placeholder, attributes);
    }
    return this.renderImage(attributes);
  };
  return Image2;
}(CloudinaryComponent);
Image.defaultProps = {};
Image.propTypes = CloudinaryComponent.propTypes;
Image.propTypes.responsive = import_prop_types.default.bool;
Image.propTypes.loading = import_prop_types.default.string;
Image.propTypes.accessibility = import_prop_types.default.string;
var Transformation = function(_CloudinaryComponent) {
  _inheritsLoose(Transformation2, _CloudinaryComponent);
  function Transformation2() {
    return _CloudinaryComponent.apply(this, arguments) || this;
  }
  var _proto = Transformation2.prototype;
  _proto.render = function render() {
    return null;
  };
  return Transformation2;
}(CloudinaryComponent);
Transformation.propTypes = CloudinaryComponent.propTypes;
Transformation.defaultProps = {};
Transformation.exposesProps = true;
Transformation.displayName = "CloudinaryTransformation";
var _excluded = ["innerRef", "publicId", "fallback", "children", "sourceTypes", "sourceTransformation", "sources"];
var Video = function(_CloudinaryComponent) {
  _inheritsLoose(Video2, _CloudinaryComponent);
  function Video2() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _CloudinaryComponent.call.apply(_CloudinaryComponent, [this].concat(args)) || this;
    _this.mimeType = "video";
    _this.mimeSubTypes = VIDEO_MIME_TYPES;
    _this.getMergedProps = function() {
      return _extends({}, _this.getContext(), _this.props);
    };
    _this.generateVideoUrl = function(cld, publicId, childTransformations, sourceTransformations, sourceType) {
      var urlOptions = import_cloudinary_core.Util.withSnakeCaseKeys(import_cloudinary_core.Util.defaults({}, sourceTransformations, childTransformations, {
        resource_type: "video",
        format: sourceType
      }));
      return cld.url(publicId, urlOptions);
    };
    _this.generateUsingSourceTypes = function(cld, publicId, childTransformations, sourceTransformations, sourceTypes) {
      return sourceTypes.map(function(sourceType) {
        return _this.toSourceTag(cld, publicId, childTransformations, sourceTransformations[sourceType] || {}, sourceType, _this.buildMimeType(sourceType));
      });
    };
    _this.generateUsingSources = function(cld, publicId, childTransformations, sources) {
      return sources.map(function(_ref) {
        var _ref$transformations = _ref.transformations, transformations = _ref$transformations === void 0 ? {} : _ref$transformations, type = _ref.type, codecs = _ref.codecs;
        return _this.toSourceTag(cld, publicId, childTransformations, transformations, type, _this.buildMimeType(type, codecs));
      });
    };
    _this.toSourceTag = function(cld, publicId, childTransformations, transformations, sourceType, mimeType) {
      var src = _this.generateVideoUrl(cld, publicId, childTransformations, transformations, sourceType);
      return import_react.default.createElement("source", {
        key: src + mimeType,
        src,
        type: mimeType
      });
    };
    _this.buildMimeType = function(type, codecs) {
      var mimeType = _this.mimeType + "/" + (_this.mimeSubTypes[type] || type);
      if (!import_cloudinary_core.Util.isEmpty(codecs)) {
        mimeType += "; codecs=" + (import_cloudinary_core.Util.isArray(codecs) ? codecs.join(", ") : codecs);
      }
      return mimeType;
    };
    _this.getVideoTagProps = function() {
      var _this$getMergedProps = _this.getMergedProps(), publicId = _this$getMergedProps.publicId, children = _this$getMergedProps.children, sourceTypes = _this$getMergedProps.sourceTypes, _this$getMergedProps$ = _this$getMergedProps.sourceTransformation, sourceTransformation = _this$getMergedProps$ === void 0 ? {} : _this$getMergedProps$, sources = _this$getMergedProps.sources, options = _objectWithoutPropertiesLoose(_this$getMergedProps, _excluded);
      options = normalizeOptions(options, {});
      var _extractCloudinaryPro = extractCloudinaryProps(options), cloudinaryProps = _extractCloudinaryPro.cloudinaryProps, cloudinaryReactProps = _extractCloudinaryPro.cloudinaryReactProps, nonCloudinaryProps = _extractCloudinaryPro.nonCloudinaryProps;
      options = _extends({}, cloudinaryProps, cloudinaryReactProps);
      var snakeCaseOptions = import_cloudinary_core.Util.withSnakeCaseKeys(options);
      var cld = import_cloudinary_core.Cloudinary["new"](snakeCaseOptions);
      var tagAttributes = cld.videoTag(publicId, options).attributes();
      tagAttributes = _extends({}, import_cloudinary_core.Util.withCamelCaseKeys(tagAttributes), nonCloudinaryProps);
      var childTransformations = getTransformation(_extends({}, options, {
        children
      }));
      var sourceElements = null;
      if (import_cloudinary_core.Util.isArray(sources) && !import_cloudinary_core.Util.isEmpty(sources)) {
        sourceElements = _this.generateUsingSources(cld, publicId, childTransformations, sources);
      } else if (import_cloudinary_core.Util.isArray(sourceTypes)) {
        sourceElements = _this.generateUsingSourceTypes(cld, publicId, childTransformations, sourceTransformation, sourceTypes);
      } else {
        tagAttributes.src = _this.generateVideoUrl(cld, publicId, childTransformations, sourceTransformation[sourceTypes] || {}, sourceTypes);
      }
      return {
        sources: sourceElements,
        tagAttributes
      };
    };
    _this.reloadVideo = function() {
      if (_this.element && _this.element.current) {
        _this.element.current.load();
      }
    };
    return _this;
  }
  var _proto = Video2.prototype;
  _proto.componentDidUpdate = function componentDidUpdate() {
    this.reloadVideo();
  };
  _proto.render = function render() {
    var _this$props = this.props, fallback = _this$props.fallback, children = _this$props.children;
    var _this$getVideoTagProp = this.getVideoTagProps(), tagAttributes = _this$getVideoTagProp.tagAttributes, sources = _this$getVideoTagProp.sources;
    return import_react.default.createElement("video", _extends({
      ref: this.attachRef
    }, tagAttributes), sources, fallback, children);
  };
  return Video2;
}(CloudinaryComponent);
Video.propTypes = {
  publicId: import_prop_types.default.string,
  sources: import_prop_types.default.arrayOf(import_prop_types.default.shape({
    type: import_prop_types.default.string,
    codecs: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.arrayOf(import_prop_types.default.string)]),
    transformations: import_prop_types.default.object
  }))
};
Video.defaultProps = {
  sourceTypes: import_cloudinary_core.Cloudinary.DEFAULT_VIDEO_PARAMS.source_types
};
var Audio = function(_Video) {
  _inheritsLoose(Audio2, _Video);
  function Audio2() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _Video.call.apply(_Video, [this].concat(args)) || this;
    _this.mimeType = "audio";
    _this.mimeSubTypes = AUDIO_MIME_TYPES;
    return _this;
  }
  var _proto = Audio2.prototype;
  _proto.render = function render() {
    var _this$props = this.props, innerRef = _this$props.innerRef, fallback = _this$props.fallback, children = _this$props.children;
    var _this$getVideoTagProp = this.getVideoTagProps(), tagAttributes = _this$getVideoTagProp.tagAttributes, sources = _this$getVideoTagProp.sources;
    delete tagAttributes.poster;
    return import_react.default.createElement("audio", _extends({
      ref: innerRef
    }, tagAttributes), sources, fallback, children);
  };
  return Audio2;
}(Video);
Audio.propTypes = {
  publicId: import_prop_types.default.string
};
Audio.defaultProps = {
  sourceTypes: ["aac", "mp3", "ogg"]
};
var Placeholder = function Placeholder2(_ref) {
  return null;
};
Placeholder.propTypes = {
  type: import_prop_types.default.string
};
Placeholder.defaultProps = {
  type: "blur"
};
Placeholder.displayName = "CloudinaryPlaceholder";
export {
  Audio,
  CloudinaryContext,
  Image,
  Placeholder,
  Transformation,
  Video
};
/*! Bundled license information:

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)
*/
//# sourceMappingURL=cloudinary-react.js.map
