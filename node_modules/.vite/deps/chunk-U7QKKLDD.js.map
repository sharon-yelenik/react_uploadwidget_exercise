{
  "version": 3,
  "sources": ["../../@cloudinary/transformation-builder-sdk/qualifiers/fontWeight.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/fontStyle.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/textDecoration.js", "../../@cloudinary/transformation-builder-sdk/internal/utils/serializeCloudinaryCharacters.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/textStroke.js", "../../@cloudinary/transformation-builder-sdk/internal/models/IStrokeModel.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/textStyle.js"],
  "sourcesContent": ["/**\n * @description Contains functions to select the font weight.\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/layers#text_layer_options|Adding text overlays to images}\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/video_layers#text_layer_options|Adding text overlays to videos}\n * @memberOf Qualifiers\n * @namespace FontWeight\n * @see To be used with {@link Qualifiers.TextStyle|Text Style}\n */\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FontWeight\n */\nfunction thin() {\n    return 'thin';\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FontWeight\n */\nfunction light() {\n    return 'light';\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FontWeight\n */\nfunction normal() {\n    return 'normal';\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FontWeight\n */\nfunction bold() {\n    return 'bold';\n}\nconst FontWeight = { bold, light, normal, thin };\nexport { FontWeight, bold, light, normal, thin };\n", "/**\n * @description Contains functions to select the style of the text.\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/layers#text_layer_options|Adding text overlays to images}\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/video_layers#text_layer_options|Adding text overlays to videos}\n * @memberOf Qualifiers\n * @namespace FontStyle\n * @see To be used with {@link Qualifiers.TextStyle|Text Style}\n */\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FontStyle\n */\nfunction normal() {\n    return 'normal';\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FontStyle\n */\nfunction italic() {\n    return 'italic';\n}\nconst FontStyle = { normal, italic };\nexport { FontStyle, italic, normal };\n", "/**\n * @description Contains functions to select the text decoration to be used with text.\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/layers#text_layer_options|Adding text overlays to images}\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/video_layers#text_layer_options|Adding text overlays to videos}\n * @memberOf Qualifiers\n * @namespace TextDecoration\n * @see To be used with {@link Qualifiers.TextStyle|Text Style}\n */\n/**\n * @summary qualifier\n * @memberOf Qualifiers.TextDecoration\n */\nfunction normal() {\n    return '';\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.TextDecoration\n */\nfunction underline() {\n    return 'underline';\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.TextDecoration\n */\nfunction strikethrough() {\n    return 'strikethrough';\n}\nconst TextDecoration = { normal, underline, strikethrough };\nexport { TextDecoration, normal, underline, strikethrough };\n", "/**\n *\n * @description - Replace (,) and (/) in a string to its URL encoded equivalence\n * @param {string} str\n * @private\n */\nfunction serializeCloudinaryCharacters(str = '') {\n    return str\n        .replace(/,/g, '%2C')\n        .replace(/\\//g, '%2F');\n}\nexport { serializeCloudinaryCharacters };\n", "/**\n * @description Contains function to set the outline stroke.\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/layers#text_layer_options|Adding text overlays to images}\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/video_layers#text_layer_options|Adding text overlays to videos}\n * @memberOf Qualifiers\n * @namespace TextAlignment\n * @see To be used with {@link Qualifiers.TextStyle|Text Style}\n */\n/**\n * @summary qualifier Adding a Border-like qualifier to the same action.\n * @memberOf Qualifiers.Stroke\n * @param {number|string|ExpressionQualifier} width The width in pixels.\n * @param {number|string|SystemColors} color The color of the border.\n */\nfunction solid(width, color) {\n    return `bo_${width}px_solid_${color}`;\n}\nconst Stroke = { solid };\nexport { Stroke, solid };\n", "/**\n * Validate that obj is an ISolidStrokeModel\n * @param obj\n */\nexport function isISolidStrokeModel(obj) {\n    return typeof obj === 'object' && obj.width != null && obj.color != null;\n}\n", "import { normal as normalFontWeight } from \"./fontWeight.js\";\nimport { normal as normalFontStyle } from \"./fontStyle.js\";\nimport { normal as normalTextDecoration } from \"./textDecoration.js\";\nimport { serializeCloudinaryCharacters } from \"../internal/utils/serializeCloudinaryCharacters.js\";\nimport { QualifierModel } from \"../internal/models/QualifierModel.js\";\nimport { solid } from \"./textStroke.js\";\nimport { isISolidStrokeModel } from \"../internal/models/IStrokeModel.js\";\n/**\n * @summary qualifier\n * @description Specifies how to style your layered text, controls the font, font size, line spacing and more.\n * </br><b>Learn more</b>: {@link https://cloudinary.com/documentation/layers#text_layer_options|Adding text overlays to images}\n * </br><b>Learn more</b>: {@link https://cloudinary.com/documentation/video_layers#text_layer_options|Adding text overlays to videos}\n * @see {@link Actions.Overlay| The overlay action}\n * @see {@link Actions.Underlay| The underlay action}\n * @memberOf Qualifiers\n */\nclass TextStyle extends QualifierModel {\n    /**\n     * @param {string} fontFamily The font family\n     * @param {number | string} fontSize The font size\n     */\n    constructor(fontFamily, fontSize) {\n        super();\n        if (!fontFamily || !fontSize) {\n            throw `You must provide a fontFamily and fontSize to a TextStyle`;\n        }\n        this._qualifierModel.fontFamily = fontFamily;\n        this._qualifierModel.fontSize = fontSize;\n    }\n    /**\n     * @param {number} spacing The spacing between multiple lines in pixels.\n     */\n    lineSpacing(spacing) {\n        this._qualifierModel.lineSpacing = spacing;\n        return this;\n    }\n    /**\n     * @param spacing The spacing between the letters, in pixels.\n     */\n    letterSpacing(spacing) {\n        this._qualifierModel.letterSpacing = spacing;\n        return this;\n    }\n    /**\n     * The antialias setting to apply to the text. When this parameter is not specified, the default antialiasing for the subsystem and target device are applied.\n     * @param {FontAntialiasType|string} antiAlias\n     */\n    fontAntialias(antiAlias) {\n        this._qualifierModel.fontAntialias = antiAlias;\n        return this;\n    }\n    /**\n     * The name of any universally available font or a custom font, specified as the public ID of a raw, authenticated font in your account.\n     * For details on custom fonts, see {@link https://cloudinary.com/documentation/layers#custom_fonts|Using custom fonts for text overlays}.\n     * @param {string} fontFamilyName\n     */\n    fontFamily(fontFamilyName) {\n        this._qualifierModel.fontFamily = fontFamilyName;\n        return this;\n    }\n    /**\n     * @param {number} fontSize The font size\n     */\n    fontSize(fontSize) {\n        this._qualifierModel.fontSize = fontSize;\n        return this;\n    }\n    /**\n     * @param {FontWeightType|string} fontWeight The font weight\n     */\n    fontWeight(fontWeight) {\n        this._qualifierModel.fontWeight = fontWeight;\n        return this;\n    }\n    /**\n     *\n     * @param {string} fontStyle The font style.\n     */\n    fontStyle(fontStyle) {\n        this._qualifierModel.fontStyle = fontStyle;\n        return this;\n    }\n    /**\n     * @param {string} fontHinting The outline hinting style to apply to the text. When this parameter is not specified, the default hint style for the font and target device are applied.\n     */\n    fontHinting(fontHinting) {\n        this._qualifierModel.fontHinting = fontHinting;\n        return this;\n    }\n    /**\n     *\n     * @param {TextDecorationType|string} textDecoration The font decoration type.\n     */\n    textDecoration(textDecoration) {\n        this._qualifierModel.textDecoration = textDecoration;\n        return this;\n    }\n    /**\n     * @param {TextAlignmentType|string} textAlignment The text alignment\n     */\n    textAlignment(textAlignment) {\n        this._qualifierModel.textAlignment = textAlignment;\n        return this;\n    }\n    /**\n     * @description Whether to include an outline stroke. Set the color and weight of the stroke\n     */\n    stroke(textStroke) {\n        if (textStroke) {\n            const strokeStyle = textStroke.split('_');\n            this._qualifierModel.stroke = {\n                width: +(strokeStyle[1].replace('px', '')),\n                color: strokeStyle[strokeStyle.length - 1]\n            };\n        }\n        else {\n            this._qualifierModel.stroke = true;\n        }\n        return this;\n    }\n    toString() {\n        const { stroke } = this._qualifierModel;\n        let strokeStr = '';\n        if (stroke) {\n            strokeStr = isISolidStrokeModel(stroke) ? `stroke_${solid(stroke.width, stroke.color)}` : 'stroke';\n        }\n        return [\n            `${serializeCloudinaryCharacters(this._qualifierModel.fontFamily)}_${this._qualifierModel.fontSize}`,\n            this._qualifierModel.fontWeight !== normalFontWeight() && this._qualifierModel.fontWeight,\n            this._qualifierModel.fontStyle !== normalFontStyle() && this._qualifierModel.fontStyle,\n            this._qualifierModel.textDecoration !== normalTextDecoration() && this._qualifierModel.textDecoration,\n            this._qualifierModel.textAlignment,\n            strokeStr,\n            this._qualifierModel.letterSpacing && `letter_spacing_${this._qualifierModel.letterSpacing}`,\n            this._qualifierModel.lineSpacing && `line_spacing_${this._qualifierModel.lineSpacing}`,\n            this._qualifierModel.fontAntialias && `antialias_${this._qualifierModel.fontAntialias}`,\n            this._qualifierModel.fontHinting && `hinting_${this._qualifierModel.fontHinting}`\n        ].filter((a) => a).join('_');\n    }\n}\nexport { TextStyle };\n"],
  "mappings": "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",
  "names": ["normal", "normal", "normal"]
}
