{
  "version": 3,
  "sources": ["../../@cloudinary/transformation-builder-sdk/qualifiers/source/sourceTypes/SubtitlesSource.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/source.js"],
  "sourcesContent": ["import { BaseTextSource } from \"./BaseTextSource.js\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.SubtitlesSource}\n * @description Defines how to manipulate a Subtitles layer\n */\nclass SubtitlesSource extends BaseTextSource {\n    constructor(fileName) {\n        super(fileName);\n        this.type = 'subtitles'; // used within TextSource for l/u_subtitles:\n        this._qualifierModel = {\n            sourceType: 'subtitles',\n            publicId: fileName\n        };\n    }\n    /**\n     * @description Set the textStyle for the subtitles layer\n     * @param {TextStyle} textStyle\n     */\n    textStyle(textStyle) {\n        this._textStyle = textStyle;\n        this._qualifierModel.textStyle = textStyle.toJson();\n        return this;\n    }\n    /**\n     *\n     * @description Used within getOpenSourceString of TextSource, this function overwrites the default encoding behaviour\n     * Subtitle file names require a different encoding than texts\n     * @param text\n     * @example\n     * encodeText('foo/bar'); // -> foo:bar\n     */\n    encodeText(text) {\n        return text.replace(/\\//g, ':');\n    }\n}\nexport { SubtitlesSource };\n", "import { VideoSource } from \"./source/sourceTypes/VideoSource.js\";\nimport { ImageSource } from \"./source/sourceTypes/ImageSource.js\";\nimport { SubtitlesSource } from \"./source/sourceTypes/SubtitlesSource.js\";\nimport { FetchSource } from \"./source/sourceTypes/FetchSource.js\";\nimport { TextSource } from \"./source/sourceTypes/TextSource.js\";\n/**\n * @description This namespace contains different sources that can be used in overlays and underlays\n * @memberOf Qualifiers\n * @namespace Source\n * @see {@link Actions.Overlay| The overlay action}\n * @see {@link Actions.Underlay| The underlay action}\n */\n/**\n * @summary qualifier\n * @description Returns an instance of an ImageSource\n * @memberOf Qualifiers.Source\n * @param {string} publicID The publicID of the image to be used as a layer\n * @return {Qualifiers.Source.ImageSource}\n */\nfunction image(publicID) {\n    return new ImageSource(publicID);\n}\n/**\n * @summary qualifier\n * @description Returns an instance of a TextSource\n * @memberOf Qualifiers.Source\n * @param {string} text The text to display.\n * @param {TextStyle | string} textStyle The textStyle to use with the text in the layer\n * @return {Qualifiers.Source.TextSource}\n */\nfunction text(text, textStyle) {\n    return new TextSource(text, textStyle);\n}\n/**\n * @summary qualifier\n * @description Returns an instance of a VideoSource\n * @memberOf Qualifiers.Source\n * @param {string} publicID The publicID of the video to be used as a layer\n * @return {Qualifiers.Source.VideoSource}\n */\nfunction video(publicID) {\n    return new VideoSource(publicID);\n}\n/**\n * @summary qualifier\n * @description Returns an instance of an VideoSource\n * @memberOf Qualifiers.Source\n * @param {string} fileName The publicID of the video to be used as a layer\n * @return {Qualifiers.Source.VideoSource}\n */\nfunction subtitles(fileName) {\n    return new SubtitlesSource(fileName);\n}\n/**\n * @summary qualifier\n * @description Returns an instance of a FetchSource\n * @memberOf Qualifiers.Source\n * @param {string} remoteURL The URL of the remote asset to fetch as a layer\n * @return {Qualifiers.Source.FetchSource}\n */\nfunction fetch(remoteURL) {\n    return new FetchSource(remoteURL);\n}\nconst Source = { image, text, video, subtitles, fetch };\nexport { Source, image, text, video, subtitles, fetch };\n"],
  "mappings": ";;;;;;;;;AAMA,IAAM,kBAAN,cAA8B,eAAe;AAAA,EACzC,YAAY,UAAU;AAClB,UAAM,QAAQ;AACd,SAAK,OAAO;AACZ,SAAK,kBAAkB;AAAA,MACnB,YAAY;AAAA,MACZ,UAAU;AAAA,IACd;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,UAAU,WAAW;AACjB,SAAK,aAAa;AAClB,SAAK,gBAAgB,YAAY,UAAU,OAAO;AAClD,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,WAAWA,OAAM;AACb,WAAOA,MAAK,QAAQ,OAAO,GAAG;AAAA,EAClC;AACJ;;;AChBA,SAAS,MAAM,UAAU;AACrB,SAAO,IAAI,YAAY,QAAQ;AACnC;AASA,SAAS,KAAKC,OAAM,WAAW;AAC3B,SAAO,IAAI,WAAWA,OAAM,SAAS;AACzC;AAQA,SAAS,MAAM,UAAU;AACrB,SAAO,IAAI,YAAY,QAAQ;AACnC;AAQA,SAAS,UAAU,UAAU;AACzB,SAAO,IAAI,gBAAgB,QAAQ;AACvC;AAQA,SAAS,MAAM,WAAW;AACtB,SAAO,IAAI,YAAY,SAAS;AACpC;AACA,IAAM,SAAS,EAAE,OAAO,MAAM,OAAO,WAAW,MAAM;",
  "names": ["text", "text"]
}
